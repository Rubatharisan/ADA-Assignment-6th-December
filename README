Graphs

Write your own implementation of the graph data structure and implement topological sort and at least
one of the following three algorithms: Dijkstra, Kruskal, Prim.

    We have implemented our graph with a adjacency list ... only doing dijkstra right now - want to do Kruskal and Prim :)


    *********
    Following graph is taken from the book, figure: 9.1
    *********

    ###
    # Adjacency list representation of our graph (vertex | adjacent vertex, ...)
    ##

    1 | 2, 3, 4
    2 | 4, 5
    3 | 6
    4 | 3, 6, 7
    5 | 4, 7
    6 | (empty)
    7 | 6

    ###
    # Weight representation of our graph (vextex | [ adjacent vertex -> cost ], ...)
    ##

    1 | [ 2 -> cost: 1 ], [ 3 -> cost: 1 ], [ 4 -> cost: 1 ]
    2 | [ 4 -> cost: 1 ], [ 5 -> cost: 1 ]
    3 | [ 6 -> cost: 1 ]
    4 | [ 3 -> cost: 1 ], [ 6 -> cost: 1 ], [ 7 -> cost: 1 ]
    5 | [ 4 -> cost: 1 ], [ 7 -> cost: 1 ]
    6 | (empty)
    7 | [ 6 -> cost: 1 ]

    ###
    # Topological sorting of our graph
    ##

    v1, v2, v5, v4, v3, v7, v6

    ###
    # Dijkstra's algorithm
    ##

    Source vertex: 1
    ----------------------------------
    vertex|distance|path
    ----------------------------------
    v1    cost: 0    1
    v2    cost: 1    1 -> 2
    v3    cost: 1    1 -> 3
    v4    cost: 1    1 -> 4
    v5    cost: 2    1 -> 2 -> 5
    v6    cost: 2    1 -> 4 -> 6
    v7    cost: 2    1 -> 4 -> 7


    *********
    Following graph is taken from the book, figure: 9.8
    *********

    ###
    # Adjacency list representation of our graph (vertex | adjacent vertex, ...)
    ##

    1 | 4, 2
    2 | 4, 5
    3 | 1, 6
    4 | 3, 5, 6, 7
    5 | 7
    6 | (empty)
    7 | 6

    ###
    # Weight representation of our graph (vextex | [ adjacent vertex -> cost ], ...)
    ##

    1 | [ 4 -> cost: 1 ], [ 2 -> cost: 2 ]
    2 | [ 4 -> cost: 3 ], [ 5 -> cost: 10 ]
    3 | [ 1 -> cost: 4 ], [ 6 -> cost: 5 ]
    4 | [ 3 -> cost: 2 ], [ 5 -> cost: 2 ], [ 6 -> cost: 8 ], [ 7 -> cost: 4 ]
    5 | [ 7 -> cost: 6 ]
    6 | (empty)
    7 | [ 6 -> cost: 1 ]

    ###
    # Topological sorting of our graph
    ##

    The graph is not a directed acyclic graph (DAG)


    ###
    # Dijkstra's algorithm
    ##

    Source vertex: 1
    ----------------------------------
    vertex|distance|path
    ----------------------------------
    v1    cost: 0    1
    v2    cost: 2    1 -> 2
    v3    cost: 3    1 -> 4 -> 3
    v4    cost: 1    1 -> 4
    v5    cost: 3    1 -> 4 -> 5
    v6    cost: 6    1 -> 4 -> 7 -> 6
    v7    cost: 5    1 -> 4 -> 7


    *********
    Following graph is taken from the book, figure: 9.50
    *********

    ###
    # Adjacency list representation of our graph (vertex | adjacent vertex, ...)
    ##

    1 | 2, 3, 4
    2 | 1, 4, 5
    3 | 1, 4, 6
    4 | 1, 2, 3, 5, 7, 6
    5 | 2, 4, 7
    6 | 3, 4, 7
    7 | 4, 5, 6

    ###
    # Weight representation of our graph (vextex | [ adjacent vertex -> cost ], ...)
    ##

    1 | [ 2 -> cost: 2 ], [ 3 -> cost: 4 ], [ 4 -> cost: 1 ]
    2 | [ 1 -> cost: 2 ], [ 4 -> cost: 3 ], [ 5 -> cost: 10 ]
    3 | [ 1 -> cost: 4 ], [ 4 -> cost: 2 ], [ 6 -> cost: 5 ]
    4 | [ 1 -> cost: 1 ], [ 2 -> cost: 3 ], [ 3 -> cost: 2 ], [ 5 -> cost: 7 ], [ 7 -> cost: 4 ], [ 6 -> cost: 8 ]
    5 | [ 2 -> cost: 10 ], [ 4 -> cost: 7 ], [ 7 -> cost: 6 ]
    6 | [ 3 -> cost: 5 ], [ 4 -> cost: 8 ], [ 7 -> cost: 1 ]
    7 | [ 4 -> cost: 4 ], [ 5 -> cost: 6 ], [ 6 -> cost: 1 ]

    ###
    # Topological sorting of our graph
    ##

    The graph is not a directed acyclic graph (DAG)


    ###
    # Prims algorithm
    ##

    I am at vertex: 1
    Vertex: 2, cost: 2 ... adding to heap
    Vertex: 3, cost: 4 ... adding to heap
    Vertex: 4, cost: 1 ... adding to heap

    I am at vertex: 4
    Vertex: 2, cost: 3 ... not updating existing heap element
    Vertex: 3, cost: 2 ... updating existing heap element
    Vertex: 5, cost: 7 ... adding to heap
    Vertex: 7, cost: 4 ... adding to heap
    Vertex: 6, cost: 8 ... adding to heap

    I am at vertex: 2
    Vertex: 5, cost: 10 ... not updating existing heap element

    I am at vertex: 3
    Vertex: 6, cost: 5 ... updating existing heap element

    I am at vertex: 7
    Vertex: 5, cost: 6 ... updating existing heap element
    Vertex: 6, cost: 1 ... updating existing heap element

    I am at vertex: 6

    I am at vertex: 5

    Source vertex: 1
    ----------------------------------
    vertex|distance|edge
    ----------------------------------
    v1    cost: 0
    v2    cost: 2    (v2,v1)
    v3    cost: 2    (v3,v4)
    v4    cost: 1    (v4,v1)
    v5    cost: 6    (v5,v7)
    v6    cost: 1    (v6,v7)
    v7    cost: 4    (v7,v4)
