Graphs

Write your own implementation of the graph data structure and implement topological sort and at least
one of the following three algorithms: Dijkstra, Kruskal, Prim.

    We have implemented our graph with a adjacency list ... only doing dijkstra right now - want to do Kruskal and Prim :)


    *********
    Following graph is taken from the book, figure: 9.1
    *********

    ###
    # Adjacency list representation of our graph (vertex | adjacent vertex, ...)
    ##

    1 | 2, 3, 4
    2 | 4, 5
    3 | 6
    4 | 3, 6, 7
    5 | 4, 7
    6 | (empty)
    7 | 6

    ###
    # Weight representation of our graph (vextex | adjacent vertex -> cost, ...)
    ##

    1 | [ 2 -> cost: 1 ], [ 3 -> cost: 1 ], [ 4 -> cost: 1 ]
    2 | [ 4 -> cost: 1 ], [ 5 -> cost: 1 ]
    3 | [ 6 -> cost: 1 ]
    4 | [ 3 -> cost: 1 ], [ 6 -> cost: 1 ], [ 7 -> cost: 1 ]
    5 | [ 4 -> cost: 1 ], [ 7 -> cost: 1 ]
    6 | (empty)
    7 | [ 6 -> cost: 1 ]

    ###
    # Topological sorting of our graph
    ##

    v1, v2, v5, v4, v3, v7, v6

    ###
    # Dijkstra's algorithm
    ##

    Source vertex: 1
    ----------------------------------
    vertex|distance|path
    ----------------------------------
    v1    cost: 0    1
    v2    cost: 1    1 -> 2
    v3    cost: 1    1 -> 3
    v4    cost: 1    1 -> 4
    v5    cost: 2    1 -> 2 -> 5
    v6    cost: 2    1 -> 4 -> 6
    v7    cost: 2    1 -> 4 -> 7


    *********
    Following graph is taken from the book, figure: 9.8
    *********

    ###
    # Adjacency list representation of our graph (vertex | adjacent vertex, ...)
    ##

    1 | 4, 2
    2 | 4, 5
    3 | 1, 6
    4 | 3, 5, 6, 7
    5 | 7
    6 | (empty)
    7 | 6

    ###
    # Weight representation of our graph (vextex | adjacent vertex -> cost, ...)
    ##

    1 | [ 4 -> cost: 1 ], [ 2 -> cost: 2 ]
    2 | [ 4 -> cost: 3 ], [ 5 -> cost: 10 ]
    3 | [ 1 -> cost: 4 ], [ 6 -> cost: 5 ]
    4 | [ 3 -> cost: 2 ], [ 5 -> cost: 2 ], [ 6 -> cost: 8 ], [ 7 -> cost: 4 ]
    5 | [ 7 -> cost: 6 ]
    6 | (empty)
    7 | [ 6 -> cost: 1 ]

    ###
    # Topological sorting of our graph
    ##

    The graph is not a directed acyclic graph (DAG)


    ###
    # Dijkstra's algorithm
    ##

    Source vertex: 2
    ----------------------------------
    vertex|distance|path
    ----------------------------------
    v1    cost: 9    2 -> 4 -> 3 -> 1
    v2    cost: 0    2
    v3    cost: 5    2 -> 4 -> 3
    v4    cost: 3    2 -> 4
    v5    cost: 5    2 -> 4 -> 5
    v6    cost: 8    2 -> 4 -> 7 -> 6
    v7    cost: 7    2 -> 4 -> 7


    Process finished with exit code 0
